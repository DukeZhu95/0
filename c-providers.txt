// app/providers/AuthProvider.tsx

import {
  PropsWithChildren,
  createContext,
  useContext,
  useEffect,
  useState,
} from 'react';
import { Session, User } from '@supabase/supabase-js';
import { supabase } from '@/config/supabase';

type AuthContext = {
  session: Session | null;
  user: User | null;
  profile: any | null;
};

const AuthContext = createContext<AuthContext>({
  session: null,
  user: null,
  profile: null,
});

export default function AuthProvider({ children }: PropsWithChildren) {
  const [session, setSession] = useState<Session | null>(null);
  const [profile, setProfile] = useState();

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
    });

    supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
    });
  }, []);

  useEffect(() => {
    if (!session?.user) {
      setProfile(null);
      return;
    }

    const fetchProfile = async () => {
      let { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', session.user.id)
        .single();
      setProfile(data);
    };
    fetchProfile();
  }, [session?.user]);

  return (
    <AuthContext.Provider value={{ session, user: session?.user, profile }}>
      {children}
    </AuthContext.Provider>
  );
}

export const useAuth = () => useContext(AuthContext);



// app/providers/ChatProvider.tsx
import { PropsWithChildren, useEffect, useState } from "react";
import { ActivityIndicator } from "react-native";
import { StreamChat } from "stream-chat";
import { Chat, OverlayProvider } from "stream-chat-expo";
import { useAuth } from "./AuthProvider";
import { supabase } from "@/config/supabase";

const client = StreamChat.getInstance(process.env.EXPO_PUBLIC_STREAM_API_KEY);

export default function ChatProvider({ children }: PropsWithChildren) {
  const [isReady, setIsReady] = useState(false);
  const { profile } = useAuth();

  useEffect(() => {
    if (!profile) {
      console.log("No profile yet");
      if (isReady) {
        // Disconnect if switching from a profile to no profile (logout)
        client.disconnectUser();
        setIsReady(false);
      }
      return;
    }

    const connect = async () => {
      try {
        const { data, error } = await supabase.functions.invoke("stream-token", {
          body: JSON.stringify({
            username: profile.username,
            profile_picture_url: profile.profile_picture_url,
          }),
        });
        if (error) throw error;
        const token = data.token;
        console.log("Generated token:", token);

        // Disconnect any existing user first
        if (client.userID) {
          console.log("Disconnecting previous user:", client.userID);
          await client.disconnectUser();
        }

        console.log("Connecting user and name:", profile.id, profile.username);

        // console.log("token user:", await tokenProvider());
        console.log("token user:", token);
        

        console.log("Connecting user:", profile.id);

        await client.connectUser(
          {
            id: profile.id,
            name: profile.username,
            image: profile.profile_picture_url,
          },
          // tokenProvider
          token
        );
        console.log("Connected user:", client.userID);
        setIsReady(true);
      } catch (error) {
        console.error("Failed to connect user:", error);
      }
    };

    connect();

    return () => {
      if (isReady) {
        client.disconnectUser();
        console.log("Disconnected user");
      }
      setIsReady(false);
    };
  }, [profile?.id]);

  if (!isReady) {
    return <ActivityIndicator />;
  }

  return (
    <OverlayProvider>
      <Chat client={client}>{children}</Chat>
    </OverlayProvider>
  );
}


// app/providers/CallProvider.tsx
import { useCalls } from "@stream-io/video-react-native-sdk";
import { router, useSegments } from "expo-router";
import { PropsWithChildren, useEffect } from 'react';
import { Pressable, Text } from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context'; 

export default function CallProvider({ children }: PropsWithChildren) {
  const calls = useCalls();
  const call = calls[0];
  const { top } = useSafeAreaInsets();
  const segments = useSegments();
  const isOnCallScreen = segments[1] === 'call';

  useEffect(() => {
    if (!call) {
      return;
    }
    if (!isOnCallScreen && call.state.callingState === 'ringing') {
      router.push(`/call`);
    }
  }, [call, isOnCallScreen]);

  return (
    <>
      {children}
      {call && !isOnCallScreen && (
        <Pressable
          onPress={() => router.push(`/call`)}
          style={{
            position: 'absolute',
            backgroundColor: 'lightgreen',
            top: top + 40,
            left: 0,
            right: 0,
            padding: 10,
          }}
        >
          <Text>
            Call: {call.id} ({call.state.callingState})
          </Text>
        </Pressable>
      )}
    </>
  );
}


// app/providers/VideoProvider.tsx
import {
  StreamVideoClient,
  StreamVideo,
} from "@stream-io/video-react-native-sdk";
import { PropsWithChildren, useEffect, useState } from "react";
import { ActivityIndicator, View } from "react-native";


import { supabase } from "@/config/supabase";
import { useAuth } from "@/context/supabase-provider";

const apiKey = process.env.EXPO_PUBLIC_STREAM_API_KEY;

export default function VideoProvider({ children }: PropsWithChildren) {
  const [videoClient, setVideoClient] = useState<StreamVideoClient | null>(
    null
  );
  const { profile } = useAuth();

  useEffect(() => {
    if (!profile) {
      if (videoClient) {
        videoClient.disconnectUser();
        setVideoClient(null);
      }
      return;
    }

    const initVideoClient = async () => {
      const user = {
        id: profile.id,
        name: profile.username,
        image: profile.profile_picture_url,
      };

      const { data, error } = await supabase.functions.invoke("stream-token", {
        body: JSON.stringify({
          username: profile.username,
          profile_picture_url: profile.profile_picture_url,
        }),
      });
      if (error) throw error;
      const token = data.token;
      console.log("video token:", token);

      const client = StreamVideoClient.getOrCreateInstance({
        apiKey,
        user,
        token,
      });

      console.log("apikey:", apiKey);
      
      // const client = new StreamVideoClient({ apiKey, user, tokenProvider });
      setVideoClient(client);
    };

    initVideoClient();

    return () => {
      if (videoClient) {
        videoClient.disconnectUser();
      }
    };
  }, [profile?.id]);

  if (!videoClient) {
    return (
      <View style={{ flex: 1, alignItems: "center", justifyContent: "center" }}>
        <ActivityIndicator />
      </View>
    );
  }

  return <StreamVideo client={videoClient}>{children}</StreamVideo>;
}
