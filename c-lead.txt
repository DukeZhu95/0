// import { Ionicons } from "@expo/vector-icons";
// import { useLocalSearchParams, useRouter } from "expo-router";
// import React, { useState, useEffect, useCallback } from "react";
// import {
//   View,
//   Text,
//   Alert,
//   StyleSheet,
//   ActivityIndicator,
//   TouchableOpacity,
//   Image,
//   Animated,
// } from "react-native";

// // import { View } from "@/components/safe-area-view"; // Adjust the import path as necessary
// import { supabase } from "@/config/supabase"; // Adjust the import path as necessary
// import { useAuth } from "@/context/supabase-provider"; // Adjust the import path as necessary
// import { colors } from "@/constants/colors";
// import { colorScheme } from "nativewind";
// import { useTheme } from "@/context/theme-context";
// import { useFont } from "@/context/font-context";
// import { useTranslation } from "react-i18next";
// import { ScrollView } from "react-native";
// import { Modal } from "react-native";

// // Type Definitions

// type Contest = {
//   id: string;
//   title: string;
//   description?: string;
//   start_date?: string; // ISO string
//   end_date?: string; // ISO string
//   winner_reward?: number;
//   participant_reward?: number;
//   created_at?: string; // ISO string
//   updated_at?: string; // ISO string
//   creator_id?: string;
//   category?: string;
//   is_sponsored?: boolean;
//   is_rewarded?: boolean;
//   explanation_video_url?: string;
//   video_url?: string;
// };

// type LeaderboardEntry = {
//   rank: number;
//   name: string;
//   votes: number;
//   profile_picture_url?: string; // Profile picture of the user
// };

// export default function ContestDetailsScreen() {
//   const { colorScheme } = useTheme();
//   const { selectedFont } = useFont();
//   const { t } = useTranslation();
//   const { contestId } = useLocalSearchParams<{ contestId: string }>();
//   const { user, joinChallenge, joinedChallenges } = useAuth();
//   const [isRulesModalVisible, setIsRulesModalVisible] = useState(false);

//   const [contest, setContest] = useState<Contest | null>(null);
//   const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([]);
//   const [refreshing, setRefreshing] = useState(false);
//   const [loading, setLoading] = useState(true);
//   const [loadingMore, setLoadingMore] = useState(false);
//   const [showAllLeaderboard, setShowAllLeaderboard] = useState(false);

//   const router = useRouter();

//   useEffect(() => {
//     if (!contestId) {
//       Alert.alert("Error", "No contest ID provided.");
//       router.back();
//       return;
//     }
//     fetchContestDetails(contestId);
//     fetchLeaderboard(contestId);
//     subscribeToLeaderboardUpdates(contestId);
//   }, [contestId]);

//   const fetchContestDetails = useCallback(async (id: string) => {
//     try {
//       setRefreshing(true);
//       setLoading(true);

//       const { data: contestData, error: contestError } = await supabase
//         .from("contests")
//         .select("*")
//         .eq("id", id)
//         .single();

//       if (contestError) {
//         console.error("Error fetching contest:", contestError);
//         Alert.alert("Error", "Failed to load contest details.");
//         setRefreshing(false);
//         setLoading(false);
//         return;
//       }
//       setContest(contestData);
//     } catch (err) {
//       console.error("Unexpected error:", err);
//       Alert.alert("Error", "An unexpected error occurred.");
//     } finally {
//       setRefreshing(false);
//       setLoading(false);
//     }
//   }, []);

//   const fetchLeaderboard = useCallback(async (id: string) => {
//     try {
//       setLoadingMore(true);

//       const { data: leaderboardData, error: leaderboardError } = await supabase
//         .from("submissions")
//         .select("id, title, user_id, contest_id")
//         .eq("contest_id", id)
//         .order("id", { ascending: true })
//         .limit(20);

//       if (leaderboardError) {
//         console.error("Error fetching leaderboard:", leaderboardError);
//         Alert.alert("Error", "Failed to load leaderboard.");
//         setLoadingMore(false);
//         return;
//       }

//       const leaderboardWithVotes = await Promise.all(
//         leaderboardData.map(async (entry, index) => {
//           const { data: voteData, error: voteError } = await supabase
//             .from("votes")
//             .select("id")
//             .eq("submission_id", entry.id);

//           const { data: userData, error: userError } = await supabase
//             .from("users")
//             .select("profile_picture_url")
//             .eq("id", entry.user_id)
//             .single();

//           if (voteError || userError) {
//             console.error(
//               "Error fetching votes or user data:",
//               voteError || userError
//             );
//             return { ...entry, votes: 0, profile_picture_url: null };
//           }

//           return {
//             rank: index + 1,
//             name: entry.title || "Unnamed Submission",
//             votes: voteData ? voteData.length : 0,
//             profile_picture_url: userData?.profile_picture_url || null,
//           };
//         })
//       );

//       leaderboardWithVotes.sort((a, b) => b.votes - a.votes); // Sort by votes in descending order

//       setLeaderboard(leaderboardWithVotes);
//     } catch (err) {
//       console.error("Unexpected error:", err);
//       Alert.alert("Error", "An unexpected error occurred.");
//     } finally {
//       setLoadingMore(false);
//     }
//   }, []);

//   const subscribeToLeaderboardUpdates = (contestId: string) => {
//     const leaderboardChannel = supabase
//       .channel(`leaderboard-${contestId}`)
//       .on(
//         "postgres_changes",
//         {
//           event: "*",
//           schema: "public",
//           table: "votes",
//           filter: `contest_id=eq.${contestId}`, // Filter for this contest's votes
//         },
//         () => {
//           fetchLeaderboard(contestId); // Re-fetch leaderboard when a vote changes
//         }
//       )
//       .subscribe();
//   };

//   const onRefresh = async () => {
//     if (contestId) {
//       setRefreshing(true);
//       await fetchContestDetails(contestId);
//       await fetchLeaderboard(contestId);
//       setRefreshing(false);
//     }
//   };

//   const determineStatus = (
//     startDate?: string,
//     endDate?: string
//   ): { text: string; color: string } => {
//     const now = new Date();
//     const start = startDate ? new Date(startDate) : null;
//     const end = endDate ? new Date(endDate) : null;

//     if (start && now < start) return { text: "Upcoming", color: "#F59E0B" }; // Yellow
//     if (end && now > end) return { text: "Ended", color: "#EF4444" }; // Red
//     return { text: "Active", color: "#10B981" }; // Green
//   };

//   const hasJoined = () => {
//     if (!user || !joinedChallenges) return false;
//     return joinedChallenges.some((jc) => jc.challenge_id === contestId);
//   };

//   const handleJoinContest = () => {
//     if (!contestId) {
//       Alert.alert("Error", "No contest ID provided.");
//       return;
//     }
//     router.push({
//       pathname: "/joincontest",
//       params: { contestId },
//     });
//   };

//   const handleViewSubmissions = () => {
//     if (!contestId) {
//       Alert.alert("Error", "No contest ID provided.");
//       return;
//     }
//     router.push({
//       pathname: "/contestsView",
//       params: { contestId },
//     });
//   };

//   const handleLoadMore = () => {
//     setShowAllLeaderboard(true);
//   };

//   if (loading) {
//     return (
//       <View
//         style={{
//           flex: 1,
//           justifyContent: "center",
//           alignItems: "center",
//           backgroundColor: colors[colorScheme]?.foreground,
//           padding: 16,
//         }}
//       >
//         <ActivityIndicator size="large" color="#10B981" />
//         <Text style={styles.loadingText}>Loading contest details...</Text>
//       </View>
//     );
//   }

//   if (!contest) {
//     return (
//       <View
//         style={{
//           flex: 1,
//           justifyContent: "center",
//           alignItems: "center",
//           backgroundColor: "#1E293B",
//           padding: 16,
//         }}
//       >
//         <Text style={styles.placeholderText}>Contest not found.</Text>
//       </View>
//     );
//   }

//   const status = determineStatus(contest.start_date, contest.end_date);

//   return (
//     <View
//       style={{
//         flex: 1,
//         backgroundColor: colors[colorScheme]?.card,
//         padding: 16,
//       }}
//     >
//       <View style={styles.contestDetailsContainer}>
//         <TouchableOpacity
//           onPress={() => setIsRulesModalVisible(true)}
//           style={{
//             marginTop: 15,
//             alignSelf: "center",
//             padding: 10,
//             backgroundColor: colors[colorScheme]?.primary,
//             borderRadius: 5,
//           }}
//         >
//           <Text
//             style={{ color: "#fff", fontSize: 16, fontFamily: selectedFont }}
//           >
//             View Contest Rules
//           </Text>
//         </TouchableOpacity>

//         <Text style={styles.contestTitle}>{contest.title}</Text>
//         {contest.description && (
//           <Text style={styles.contestDescription}>{contest.description}</Text>
//         )}
//         <View style={styles.statusContainer}>
//           <View
//             style={[styles.statusIndicator, { backgroundColor: status.color }]}
//           />
//           <Text style={[styles.statusText, { color: status.color }]}>
//             {status.text}
//           </Text>
//         </View>
//         <Text style={styles.contestDates}>
//           Start:{" "}
//           {contest.start_date
//             ? new Date(contest.start_date).toDateString()
//             : "N/A"}{" "}
//           | End:{" "}
//           {contest.end_date ? new Date(contest.end_date).toDateString() : "N/A"}
//         </Text>

//         {!status.text.includes("Ended") && (
//           <TouchableOpacity
//             style={[
//               styles.joinButton,
//               hasJoined() ? styles.joinedButton : styles.notJoinedButton,
//             ]}
//             onPress={handleJoinContest}
//             disabled={hasJoined()}
//           >
//             <Ionicons
//               name={hasJoined() ? "checkmark-circle" : "add-circle-outline"}
//               size={20}
//               color="#FFFFFF"
//               style={styles.joinButtonIcon}
//             />
//             <Text style={styles.joinButtonText}>
//               {hasJoined() ? "Joined" : "Join Contest"}
//             </Text>
//           </TouchableOpacity>
//         )}

//         <TouchableOpacity
//           style={styles.viewSubmissionsButton}
//           onPress={handleViewSubmissions}
//         >
//           <Ionicons
//             name="list-circle-outline"
//             size={20}
//             color="#FFFFFF"
//             style={styles.viewSubmissionsIcon}
//           />
//           <Text style={styles.viewSubmissionsText}>View Submissions</Text>
//         </TouchableOpacity>
//       </View>

//       <View style={styles.leaderboardContainer}>
//         <Text style={styles.leaderboardTitle}>Leaderboard</Text>
//         {leaderboard.slice(0, showAllLeaderboard ? 20 : 8).map((entry) => (
//           <View key={entry.rank} style={styles.leaderboardEntry}>
//             <Text style={styles.leaderboardRank}>#{entry.rank}</Text>
//             {entry.profile_picture_url && (
//               <Image
//                 source={{ uri: entry.profile_picture_url }}
//                 style={styles.profileImage}
//                 alt="User Profile"
//               />
//             )}
//             <Text style={styles.leaderboardName}>{entry.name}</Text>
//             <Text style={styles.leaderboardVotes}>{entry.votes} Votes</Text>
//           </View>
//         ))}
//         {!showAllLeaderboard && leaderboard.length > 8 && (
//           <TouchableOpacity
//             style={styles.loadMoreButton}
//             onPress={handleLoadMore}
//           >
//             <Text style={styles.loadMoreText}>Load More</Text>
//           </TouchableOpacity>
//         )}
//       </View>

//       <Modal
//         animationType="slide"
//         transparent={true}
//         visible={isRulesModalVisible}
//         onRequestClose={() => setIsRulesModalVisible(false)}
//       >
//         <View
//           style={{
//             flex: 1,
//             justifyContent: "center",
//             alignItems: "center",
//             backgroundColor: "rgba(0,0,0,0.5)",
//           }}
//         >
//           <View
//             style={{
//               width: "90%",
//               padding: 20,
//               backgroundColor: colors[colorScheme]?.card,
//               borderRadius: 10,
//             }}
//           >
//             <Text
//               style={{
//                 fontSize: 22,
//                 fontWeight: "bold",
//                 color: colors[colorScheme]?.primary,
//                 fontFamily: selectedFont,
//                 marginBottom: 10,
//               }}
//             >
//               Challenge & Contest Rules
//             </Text>

//             <ScrollView style={{ maxHeight: 400 }}>
//               <Text style={{ fontSize: 16, fontWeight: "bold", marginTop: 10 }}>
//                 1. Creating a Challenge
//               </Text>
//               <Text>
//                 - Any user can create a challenge and post it on Challenz.
//               </Text>
//               <Text>
//                 - Challenges can be open-ended or have a specific theme.
//               </Text>
//               <Text>
//                 - A clear title, description, and instructions are required.
//               </Text>
//               <Text>- The creator sets a time limit for participation.</Text>
//               <Text>- Once posted, users can join and submit entries.</Text>
//               <Text>- Winning challenges get more visibility.</Text>

//               <Text style={{ fontSize: 16, fontWeight: "bold", marginTop: 10 }}>
//                 2. Creating a Contest
//               </Text>
//               <Text>- A contest is a structured challenge with a theme.</Text>
//               <Text>- Users can create contests and invite participants.</Text>
//               <Text>
//                 - Engagement (views, likes, comments) determines rankings.
//               </Text>
//               <Text>
//                 - The creator cannot modify rankings after submission.
//               </Text>

//               <Text style={{ fontSize: 16, fontWeight: "bold", marginTop: 10 }}>
//                 3. Entering a Challenge or Contest
//               </Text>
//               <Text>- Users can join by submitting their entry.</Text>
//               <Text>- Entries must follow challenge guidelines.</Text>
//               <Text>- Engagement determines rankings.</Text>
//               <Text>
//                 - The top 10 ranked participants enter the Winning Zone.
//               </Text>

//               <Text style={{ fontSize: 16, fontWeight: "bold", marginTop: 10 }}>
//                 4. Winning and Visibility
//               </Text>
//               <Text>
//                 - The top 10 ranked entries receive increased exposure.
//               </Text>
//               <Text>
//                 - Challenz may feature top challenges for further visibility.
//               </Text>

//               <Text style={{ fontSize: 16, fontWeight: "bold", marginTop: 10 }}>
//                 5. Disqualification & Content Moderation
//               </Text>
//               <Text>- Entries must follow community guidelines.</Text>
//               <Text>
//                 - Hate speech, violence, harassment, explicit, or illegal
//                 content is removed.
//               </Text>
//               <Text>
//                 - Fake engagement (spam, bots) leads to disqualification.
//               </Text>
//               <Text>- Manipulating rankings may result in suspension.</Text>
//               <Text>
//                 - Challenz reserves the right to remove any violating content.
//               </Text>

//               <Text style={{ fontSize: 16, fontWeight: "bold", marginTop: 10 }}>
//                 6. Disclaimer
//               </Text>
//               <Text>
//                 The organization of challenges and contests is independent and
//                 is not sponsored, endorsed, or affiliated with Apple in any way.
//               </Text>
//             </ScrollView>

//             <TouchableOpacity
//               onPress={() => setIsRulesModalVisible(false)}
//               style={{
//                 marginTop: 15,
//                 backgroundColor: colors[colorScheme]?.primary,
//                 padding: 10,
//                 borderRadius: 5,
//                 alignItems: "center",
//               }}
//             >
//               <Text
//                 style={{
//                   color: "#fff",
//                   fontSize: 16,
//                   fontFamily: selectedFont,
//                 }}
//               >
//                 Close
//               </Text>
//             </TouchableOpacity>
//           </View>
//         </View>
//       </Modal>
//     </View>
//   );
// }

// // Styles
// const styles = StyleSheet.create({
//   centered: {
//     flex: 1,
//     justifyContent: "center",
//     alignItems: "center",
//     backgroundColor: "#1E293B",
//     padding: 16,
//   },
//   loadingText: {
//     color: "#10B981", // Tailwind green-500
//     marginTop: 8,
//     fontSize: 16,
//   },
//   placeholderText: {
//     color: "#FFFFFF",
//     fontSize: 16,
//   },
//   contestDetailsContainer: {
//     backgroundColor: "#334155", // Tailwind slate-700
//     borderRadius: 12,
//     padding: 16,
//     marginBottom: 24,
//   },
//   contestTitle: {
//     fontSize: 24,
//     fontWeight: "bold",
//     color: "#FFFFFF",
//     marginBottom: 8,
//   },
//   contestDescription: {
//     fontSize: 16,
//     color: "#94A3B8", // Tailwind slate-400
//     marginBottom: 12,
//   },
//   statusContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 8,
//   },
//   statusIndicator: {
//     width: 10,
//     height: 10,
//     borderRadius: 5,
//     marginRight: 6,
//   },
//   statusText: {
//     fontSize: 16,
//     fontWeight: "600",
//   },
//   contestDates: {
//     fontSize: 14,
//     color: "#94A3B8",
//   },
//   joinButton: {
//     flexDirection: "row",
//     alignItems: "center",
//     backgroundColor: "#10B981", // Tailwind emerald-500
//     padding: 10,
//     borderRadius: 8,
//     marginTop: 12,
//     alignSelf: "flex-start",
//   },
//   joinedButton: {
//     backgroundColor: "#6B7280", // Tailwind gray-500
//   },
//   notJoinedButton: {
//     backgroundColor: "#10B981", // Tailwind emerald-500
//   },
//   joinButtonIcon: {
//     marginRight: 6,
//   },
//   joinButtonText: {
//     color: "#FFFFFF",
//     fontSize: 16,
//     fontWeight: "600",
//   },
//   viewSubmissionsButton: {
//     flexDirection: "row",
//     alignItems: "center",
//     backgroundColor: "#3B82F6", // Tailwind blue-500
//     padding: 10,
//     borderRadius: 8,
//     marginTop: 12,
//     alignSelf: "flex-start",
//   },
//   viewSubmissionsIcon: {
//     marginRight: 6,
//   },
//   viewSubmissionsText: {
//     color: "#FFFFFF",
//     fontSize: 16,
//     fontWeight: "600",
//   },
//   leaderboardContainer: {
//     marginTop: 16,
//     backgroundColor: "", // Cinematic golden frame
//     borderRadius: 12,
//     padding: 16,
//     borderWidth: 4,
//     borderColor: "", // Darker golden color for the border
//     shadowColor: "#DAA520",
//     shadowOffset: { width: 0, height: 4 },
//     shadowOpacity: 0.8,
//     shadowRadius: 10,
//   },
//   leaderboardTitle: {
//     fontSize: 28,
//     fontWeight: "bold",
//     color: "#000",
//     textAlign: "center",
//     marginBottom: 16,
//     textShadowColor: "#DAA520",
//     textShadowOffset: { width: 0, height: 0 },
//     textShadowRadius: 10,
//   },
//   leaderboardEntry: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "space-between",
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "",
//   },
//   leaderboardRank: {
//     fontSize: 20,
//     fontWeight: "bold",
//     color: "#DAA520", // Golden color for rank
//     flex: 0.1,
//   },
//   leaderboardName: {
//     fontSize: 18,
//     color: "#000",
//     flex: 0.5,
//   },
//   leaderboardVotes: {
//     fontSize: 18,
//     color: "#10B981", // Green color for votes
//     flex: 0.3,
//   },
//   profileImage: {
//     width: 40,
//     height: 40,
//     borderRadius: 20,
//     marginRight: 8,
//   },
//   loadMoreButton: {
//     marginTop: 8,
//     paddingVertical: 8,
//     alignItems: "center",
//     backgroundColor: "#3B82F6",
//     borderRadius: 8,
//   },
//   loadMoreText: {
//     color: "#FFFFFF",
//     fontSize: 16,
//     fontWeight: "bold",
//   },
// });

// app/(app)/(protected)/contestdetails.tsx
import React, { useState, useEffect, useCallback } from "react";
import { View, Text, TouchableOpacity, FlatList, Alert } from "react-native";
import { useLocalSearchParams, router } from "expo-router";
import { supabase } from "@/config/supabase";
import { useAuth } from "@/context/supabase-provider";
import { useTheme } from "@/context/theme-context";
import { useFont } from "@/context/font-context";
import { useTranslation } from "react-i18next";
import { colors } from "@/constants/colours";
import { ContestRulesModal } from "./contestRulesModal";

type Contest = {
  id: string;
  title: string;
  description?: string;
  start_date?: string;
  end_date?: string;
  winner_reward?: number;
  participant_reward?: number;
  created_at?: string;
  updated_at?: string;
  creator_id?: string;
  category?: string;
  is_sponsored?: boolean;
  is_rewarded?: boolean;
  explanation_video_url?: string;
  video_url?: string;
};

type LeaderboardEntry = {
  rank: number;
  name: string;
  votes: number;
  profile_picture_url?: string;
};

export default function ContestDetailsScreen() {
  // const { category, subcategory } = useLocalSearchParams<{ category: string; subcategory: string }>();

  const { colorScheme } = useTheme();
  const { selectedFont } = useFont();
  const { t } = useTranslation();
  const { contestId } = useLocalSearchParams<{ contestId: string }>();
  const { user, joinChallenge, joinedChallenges } = useAuth();
  const [isRulesModalVisible, setIsRulesModalVisible] = useState(false);

  const [contest, setContest] = useState<Contest | null>(null);
  const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([]);
  const [refreshing, setRefreshing] = useState(false);
  const [loading, setLoading] = useState(true);
  const [loadingMore, setLoadingMore] = useState(false);
  const [showAllLeaderboard, setShowAllLeaderboard] = useState(false);

  useEffect(() => {
    if (!contestId) {
      Alert.alert("Error", "No contest ID provided.");
      router.back();
      return;
    }
    fetchContestDetails(contestId);
    fetchLeaderboard(contestId);
    subscribeToLeaderboardUpdates(contestId);
  }, [contestId]);

  const fetchContestDetails = useCallback(async (id: string) => {
    try {
      setRefreshing(true);
      setLoading(true);

      const { data: contestData, error: contestError } = await supabase
        .from("contests")
        .select("*")
        .eq("id", id)
        .single();

      if (contestError) {
        console.error("Error fetching contest:", contestError);
        Alert.alert("Error", "Failed to load contest details.");
        setRefreshing(false);
        setLoading(false);
        return;
      }
      setContest(contestData);
    } catch (err) {
      console.error("Unexpected error:", err);
      Alert.alert("Error", "An unexpected error occurred.");
    } finally {
      setRefreshing(false);
      setLoading(false);
    }
  }, []);

  const fetchLeaderboard = useCallback(async (id: string) => {
    try {
      setLoadingMore(true);

      const { data: leaderboardData, error: leaderboardError } = await supabase
        .from("submissions")
        .select("id, title, user_id, contest_id")
        .eq("contest_id", id)
        .order("id", { ascending: true })
        .limit(20);

      if (leaderboardError) {
        console.error("Error fetching leaderboard:", leaderboardError);
        Alert.alert("Error", "Failed to load leaderboard.");
        setLoadingMore(false);
        return;
      }

      const leaderboardWithVotes = await Promise.all(
        leaderboardData.map(async (entry, index) => {
          const { data: voteData, error: voteError } = await supabase
            .from("votes")
            .select("id")
            .eq("submission_id", entry.id);

          const { data: userData, error: userError } = await supabase
            .from("users")
            .select("profile_picture_url")
            .eq("id", entry.user_id)
            .single();

          if (voteError || userError) {
            console.error(
              "Error fetching votes or user data:",
              voteError || userError
            );
            return { ...entry, votes: 0, profile_picture_url: null };
          }

          return {
            rank: index + 1,
            name: entry.title || "Unnamed Submission",
            votes: voteData ? voteData.length : 0,
            profile_picture_url: userData?.profile_picture_url || null,
          };
        })
      );

      leaderboardWithVotes.sort((a, b) => b.votes - a.votes); // Sort by votes in descending order

      setLeaderboard(leaderboardWithVotes);
    } catch (err) {
      console.error("Unexpected error:", err);
      Alert.alert("Error", "An unexpected error occurred.");
    } finally {
      setLoadingMore(false);
    }
  }, []);

  const subscribeToLeaderboardUpdates = (contestId: string) => {
    const leaderboardChannel = supabase
      .channel(`leaderboard-${contestId}`)
      .on(
        "postgres_changes",
        {
          event: "*",
          schema: "public",
          table: "votes",
          filter: `contest_id=eq.${contestId}`, // Filter for this contest's votes
        },
        () => {
          fetchLeaderboard(contestId); // Re-fetch leaderboard when a vote changes
        }
      )
      .subscribe();
  };

  const onRefresh = async () => {
    if (contestId) {
      setRefreshing(true);
      await fetchContestDetails(contestId);
      await fetchLeaderboard(contestId);
      setRefreshing(false);
    }
  };

  const determineStatus = (
    startDate?: string,
    endDate?: string
  ): { text: string; color: string } => {
    const now = new Date();
    const start = startDate ? new Date(startDate) : null;
    const end = endDate ? new Date(endDate) : null;

    if (start && now < start) return { text: "Upcoming", color: "#F59E0B" }; // Yellow
    if (end && now > end) return { text: "Ended", color: "#EF4444" }; // Red
    return { text: "Active", color: "#10B981" }; // Green
  };

  const hasJoined = () => {
    if (!user || !joinedChallenges) return false;
    return joinedChallenges.some((jc) => jc.challenge_id === contestId);
  };

  const handleJoinContest = () => {
    if (!contest?.id) return;
    router.push(`/joincontest?contestId=${contest.id}`);
  };

  const renderLeaderboardItem = ({ item }: { item: LeaderboardEntry }) => (
    <View
      style={{
        flexDirection: "row",
        justifyContent: "space-between",
        paddingVertical: 8,
      }}
    >
      <Text style={{ fontSize: 16, color: "#333" }}>
        #{item.rank} {item.name}
      </Text>
      <Text style={{ fontSize: 16, color: "#1D5D9B" }}>{item.votes} Votes</Text>
    </View>
  );

  if (loading) {
    return (
      <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
        <Text style={{ fontSize: 16, color: "#333" }}>Loading...</Text>
      </View>
    );
  }

  if (!contest) {
    return (
      <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
        <Text style={{ fontSize: 16, color: "#333" }}>Contest not found.</Text>
      </View>
    );
  }

  return (
    <View style={{ flex: 1, backgroundColor: "#F4F4F4", padding: 16 }}>
      <View className="flex flex-row items-center justify-between">
        <Text
          style={{
            fontSize: 24,
            fontWeight: "bold",
            color: "#333",
            marginBottom: 16,
          }}
        >
          {contest.title}
        </Text>
        {contest.is_sponsored && (
          <Text className="border p-2 rounded text-lime-500">Sponsored</Text>
        )}
      </View>
      <Text style={{ fontSize: 16, color: "#666", marginBottom: 16 }}>
        {contest.description}
      </Text>

      <TouchableOpacity
        style={{
          backgroundColor: colors[colorScheme]?.primary,
          paddingVertical: 16,
          borderRadius: 8,
          alignItems: "center",
          marginBottom: 16,
        }}
        onPress={() => setIsRulesModalVisible(true)}
      >
        <Text style={{ color: "#FFFFFF", fontSize: 18, fontWeight: "600" }}>
          View Contest Rules
        </Text>
      </TouchableOpacity>

      <TouchableOpacity
        style={{
          backgroundColor: "green",
          paddingVertical: 16,
          borderRadius: 8,
          alignItems: "center",
          marginBottom: 16,
        }}
        onPress={handleJoinContest}
      >
        <Text style={{ color: "#FFFFFF", fontSize: 18, fontWeight: "600" }}>
          Join Contest
        </Text>
      </TouchableOpacity>

      <TouchableOpacity
        style={{
          backgroundColor: colors[colorScheme]?.accent,
          paddingVertical: 16,
          borderRadius: 8,
          alignItems: "center",
          marginBottom: 16,
        }}
        onPress={() => router.push("/contestsView")}
      >
        <Text style={{ color: "#FFFFFF", fontSize: 18, fontWeight: "600" }}>
          View Submissions
        </Text>
      </TouchableOpacity>

      <TouchableOpacity
        style={{
          backgroundColor: colors[colorScheme]?.secondaryForeground,
          paddingVertical: 16,
          borderRadius: 8,
          alignItems: "center",
          marginBottom: 16,
        }}
        onPress={() => router.push("/leaderboard")}
      >
        <Text style={{ color: "#FFFFFF", fontSize: 18, fontWeight: "600" }}>
          View Leaderboard
        </Text>
      </TouchableOpacity>

      {/* <Text
        style={{
          fontSize: 18,
          fontWeight: "600",
          color: "#333",
          marginBottom: 16,
        }}
      >
        Leaderboard
      </Text>
      <FlatList
        data={leaderboard}
        renderItem={renderLeaderboardItem}
        keyExtractor={(item) => item.rank.toString()}
      /> */}
      <ContestRulesModal
        visible={isRulesModalVisible}
        onClose={() => setIsRulesModalVisible(false)}
      />
    </View>
  );
}
