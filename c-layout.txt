// app/_layout.tsx
import "../global.css";
import { Slot } from "expo-router";

import { SupabaseProvider } from "@/context/supabase-provider";
import { useState } from "react";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { GestureHandlerRootView } from "react-native-gesture-handler";

export default function RootLayout() {
  const [queryClient] = useState(
    () =>
      new QueryClient({
        defaultOptions: {
          queries: {
            refetchOnWindowFocus: false,
            staleTime: 5 * 60 * 1000,
          },
        },
      })
  );
  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <QueryClientProvider client={queryClient}>
        <SupabaseProvider>
          <Slot />
        </SupabaseProvider>
      </QueryClientProvider>
    </GestureHandlerRootView>
  );
}


// app/(app)/_layout.tsx
import React from "react";
import { Stack } from "expo-router";
import { ThemeProvider, useTheme } from "@/context/theme-context";
import { FontProvider, useFont } from "@/context/font-context";
import { StatusBar } from "expo-status-bar";
import { LanguageProvider } from "@/context/language-context";
import { colors } from "@/constants/colours";
import { useTranslation } from "react-i18next";
import ChatProvider from "@/providers/ChatProvider";

export default function AppLayout() {
  return (
    <LanguageProvider>
      <FontProvider>
        <ThemeProvider>
          <ChatProvider>
            <AppStack />
          </ChatProvider>
        </ThemeProvider>
      </FontProvider>
    </LanguageProvider>
  );
}

function AppStack() {
  const { colorScheme } = useTheme();
  const { selectedFont } = useFont();
  const { t } = useTranslation();

  return (
    <>
      <Stack
        screenOptions={{
          headerShown: true,
          gestureEnabled: true,
          headerStyle: {
            backgroundColor: colors[colorScheme]?.background,
          },
          headerTintColor: colors[colorScheme]?.foreground,
          headerTitleStyle: {
            fontFamily: selectedFont,
          },
          contentStyle: {
            backgroundColor: colors[colorScheme]?.background,
          },
        }}
      >
        <Stack.Screen
          name="(protected)"
          options={{ headerTitle: "", headerShown: false }}
        />
        <Stack.Screen
          name="(auth)"
          options={{ headerTitle: "", headerShown: false }}
        />
        <Stack.Screen
          name="(legal)"
          options={{ headerTitle: "", headerShown: false }}
        />
        <Stack.Screen
          name="welcome"
          options={{ headerTitle: "", headerShown: false }}
        />
        <Stack.Screen
          name="inbox"
          options={{
            headerShown: false,
            headerTitle: "",
          }}
        />
      </Stack>
      <StatusBar
        style="inverted"
        animated
        backgroundColor={colors[colorScheme]?.background}
      />
    </>
  );
}
